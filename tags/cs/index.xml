<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS💻 on Anjana</title>
    <link>https://anjanavakil.github.io/tags/cs/</link>
    <description>Recent content in CS💻 on Anjana</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 01 Dec 2022 08:15:48 +0800</lastBuildDate><atom:link href="https://anjanavakil.github.io/tags/cs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MIT 6.824: Distributed Systems &amp; Paper Reading</title>
      <link>https://anjanavakil.github.io/post/mit6_824/</link>
      <pubDate>Thu, 01 Dec 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/mit6_824/</guid>
      <description>跟的是Spring 2022。 刚开始还惊讶CS自学指南的MIT6.824: Distributed System预计学时为什么是200小时，学了几天终于知道为什么需要</description>
    </item>
    
    <item>
      <title>CMU 15-445/645 NOTES</title>
      <link>https://anjanavakil.github.io/post/cmu15-445/</link>
      <pubDate>Mon, 28 Nov 2022 22:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/cmu15-445/</guid>
      <description>Lecture #01: Course Introduction and the Relational Model Relational Model The relational model defines a database abstraction based on relations to avoid maintenance overhead. Key tenets: Store database in simple data structures(relations). Physical storage left up to the DBMS implementation. Access data through high-level language, DBMS figures out best execution strategy. n-ary Relation = Table with n columns Relational Algebra: JOIN Databases are ubiquitous. Lecture #02: Advanced SQL SQL is</description>
    </item>
    
    <item>
      <title>ECNU Algorithm 总结</title>
      <link>https://anjanavakil.github.io/post/ecnu_algorithm/</link>
      <pubDate>Sun, 13 Nov 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/ecnu_algorithm/</guid>
      <description>ECNU“算法设计与分析”课程OJ平台题解及总结。 以下各图片均来源于：https://acm.ecnu.edu.cn/ A.框体排列 简单题，贪</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Notes</title>
      <link>https://anjanavakil.github.io/post/cpp/</link>
      <pubDate>Mon, 10 Oct 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/cpp/</guid>
      <description>GDB GDB Tutorial: Some Cool Tips to Debug C/C++ Code C++ Introduction to C++11 and C++14 with Example Code Snippet 4 Lamba Expressions of Lambda Functions 1 [firstPart](secondPart) TypeYouReturn{BodyOfLambda}(actualParameters); lambda function: 1 double dUpperPart=[]{double dX, double dY}double{return dX*dX+dY*dY;} 1 2 3 4 vector&amp;lt;int&amp;gt; iVector; for_each(begin(iVector),end(iVector),[](int n){ if(n%2==0) cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; endl; }); 5 Static Assertion 1 static_assert(evaluateExpression, stringMessage); 1 static_assert(sizeof(long long int)&amp;gt;=16;&amp;#34;This is unexpected&amp;#34;); 7 move and &amp;amp;&amp;amp; 1</description>
    </item>
    
    <item>
      <title>Middleware</title>
      <link>https://anjanavakil.github.io/post/middleware/</link>
      <pubDate>Thu, 01 Sep 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/middleware/</guid>
      <description>9.30更新：这本书应该不会再看下去了，本来想的是中文书自己没有基础可以一看，但发现干货真的不多，全文都是在贴代码，并且文字有点冗余。人生短</description>
    </item>
    
    <item>
      <title>Go</title>
      <link>https://anjanavakil.github.io/post/go/</link>
      <pubDate>Thu, 11 Aug 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/go/</guid>
      <description>编程语言都是相通的，所以通过记录与其他语言不同的部分学习Go语言。 Reference: Go 语言教程 Go基础语法 1、当标识符（包括常量、变量、类型、函数名、结构字</description>
    </item>
    
    <item>
      <title>LeetCode Greedy</title>
      <link>https://anjanavakil.github.io/post/leetcode-greedy/</link>
      <pubDate>Fri, 05 Aug 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-greedy/</guid>
      <description>LeetCode + 《剑指Offer II》刷题笔记。 贪心 870 Advantage Shuffle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public int[] advantageCount(int[] nums1, int[] nums2) { int n=nums1.length; TreeMap&amp;lt;Integer,Integer&amp;gt; map=new TreeMap&amp;lt;&amp;gt;(); for(int num:nums1){ map.put(num,map.getOrDefault(num,0)+1); } int[] ans=new int[n]; for(int i=0;i&amp;lt;n;i++){</description>
    </item>
    
    <item>
      <title>Java Concurrency-JUC</title>
      <link>https://anjanavakil.github.io/post/juc/</link>
      <pubDate>Mon, 01 Aug 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/juc/</guid>
      <description>Package java.util.concurrent Description Utility classes commonly useful in concurrent programming. This package includes a few small standardized extensible frameworks, as well as some classes that provide useful functionality and are otherwise tedious or difficult to implement. Here are brief descriptions of the main components. See also the java.util.concurrent.locks and java.util.concurrent.atomic packages. Executors Interfaces. Executoris a simple standardized interface for defining custom thread-like subsystems, including thread pools, asynchronous I/O, and lightweight</description>
    </item>
    
    <item>
      <title>SQL</title>
      <link>https://anjanavakil.github.io/post/sql/</link>
      <pubDate>Sat, 30 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/sql/</guid>
      <description>Difference between count() 参考🔗： What is the Difference Between COUNT(*), COUNT(1), COUNT(column name), and COUNT(DISTINCT column name)? 很不错的文章，果然还是看英文靠谱点。 The COUNT() function belongs to SQL’s aggregate functions. It counts the number of rows that satisfy the criteria defined in the parentheses. It does not return the rows</description>
    </item>
    
    <item>
      <title>LeetCode Graph</title>
      <link>https://anjanavakil.github.io/post/leetcode-graph/</link>
      <pubDate>Thu, 28 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-graph/</guid>
      <description>LeetCode + 《剑指Offer II》刷题笔记。 图 图的搜索 如果要求在无权图中找出两个节点之间的最短距离，那么广度优先搜索可能是更合适的算法。 如果面试题要</description>
    </item>
    
    <item>
      <title>The Effective Engineer</title>
      <link>https://anjanavakil.github.io/post/the-effective-engineer/</link>
      <pubDate>Mon, 25 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/the-effective-engineer/</guid>
      <description>豆瓣🔗： The Effective Engineer: How to Leverage Your Efforts in Software Engineering to Make a Disproportionate and Meaningful Impact Talks at Google🔗: The Effective Engineer | Edmond Lau | Talks at Google 大概是3、4月份读的英文版，发现7月份出了翻译版，对我来</description>
    </item>
    
    <item>
      <title>Java Source Code</title>
      <link>https://anjanavakil.github.io/post/java-source-code/</link>
      <pubDate>Fri, 22 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/java-source-code/</guid>
      <description>2022.8.9总结反思：看起来好像分析源码挺久了，但是每次都只是读一遍源码、注释和Java doc，然后Command+C复制、Comman</description>
    </item>
    
    <item>
      <title>LeetCode Queue</title>
      <link>https://anjanavakil.github.io/post/leetcode-queue/</link>
      <pubDate>Thu, 21 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-queue/</guid>
      <description>LeetCode + 《剑指Offer II》刷题笔记。 队列 滑动窗口 剑指 Offer II 041. 滑动窗口的平均值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class MovingAverage { public: queue&amp;lt;int&amp;gt; q; int</description>
    </item>
    
    <item>
      <title>LeetCode Stack</title>
      <link>https://anjanavakil.github.io/post/leetcode-stack/</link>
      <pubDate>Wed, 20 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-stack/</guid>
      <description>LeetCode + 《剑指Offer II》刷题笔记。 栈 剑指 Offer II 036. 后缀表达式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { public: int evalRPN(vector&amp;lt;string&amp;gt;&amp;amp; tokens) { stack&amp;lt;int&amp;gt; s; int a,b,res; for(string&amp;amp;</description>
    </item>
    
    <item>
      <title>LeetCode Dynamic Programming</title>
      <link>https://anjanavakil.github.io/post/leetcode-dp/</link>
      <pubDate>Mon, 18 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-dp/</guid>
      <description>LeetCode + 《剑指Offer II》刷题笔记。 动态规划 1D DP 70 Climbing Stairs 1 2 3 4 5 6 7 8 9 10 11 12 class Solution { public: int climbStairs(int n) { vector&amp;lt;int&amp;gt; dp(n+1); dp[0]=1; dp[1]=1; for(int i=2;i&amp;lt;=n;i++){ dp[i]=dp[i-1]+dp[i-2]; } return dp[n]; } }; 时间复杂度：O(n) 空</description>
    </item>
    
    <item>
      <title>精彩video</title>
      <link>https://anjanavakil.github.io/post/video/</link>
      <pubDate>Fri, 15 Jul 2022 21:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/video/</guid>
      <description>网络上看过的精彩讲座/课程/录像/视频等： A Philosophy of Software Design | John Ousterhout | Talks at Google Jul 15 A Philosophy of Software Design | John Ousterhout | Talks at Google John Ousterhout, Professor of Computer Science at Stanford University, discusses complex techniques on how to become a more confident coder. John is excited</description>
    </item>
    
    <item>
      <title>StringUtils: leftPad&#43;rightPad</title>
      <link>https://anjanavakil.github.io/post/stringutils/</link>
      <pubDate>Fri, 15 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/stringutils/</guid>
      <description>StringUtils的leftpad和righted方法源码分析 依赖： 1 2 3 4 5 6 &amp;lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.commons&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-lang3&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.12.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; leftPad: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</description>
    </item>
    
    <item>
      <title>Spring Batch</title>
      <link>https://anjanavakil.github.io/post/springbatch-notes/</link>
      <pubDate>Mon, 11 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/springbatch-notes/</guid>
      <description>官网示例： Creating a Batch Service Create a Business Class Person.java: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package com.example.batchprocessing; public class Person { private String lastName; private String firstName; public Person() { } public Person(String firstName,</description>
    </item>
    
    <item>
      <title>LeetCode Heap</title>
      <link>https://anjanavakil.github.io/post/leetcode-heap/</link>
      <pubDate>Fri, 08 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-heap/</guid>
      <description>LeetCode + 《剑指Offer II》刷题笔记。 堆 如果面试题需要求出一个动态数据集合中的最大值或最小值，那么可以考虑使用堆来解决问题。最小堆经常用来求取</description>
    </item>
    
    <item>
      <title>LeetCode Tree</title>
      <link>https://anjanavakil.github.io/post/leetcode-tree/</link>
      <pubDate>Tue, 05 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-tree/</guid>
      <description>LeetCode + 《剑指Offer II》刷题笔记。 树 二叉树的DFS Preorder Traversal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public: vector&amp;lt;int&amp;gt; preorderTraversal(TreeNode* root) { vector&amp;lt;int&amp;gt; res; stack&amp;lt;TreeNode*&amp;gt; s; TreeNode* cur=root; while(cur || !s.empty()){ while(cur){ res.push_back(cur-&amp;gt;val); s.push(cur); cur=cur-&amp;gt;left; } cur=s.top();</description>
    </item>
    
  </channel>
</rss>
