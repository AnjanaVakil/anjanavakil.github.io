<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS💻 on Anjana</title>
    <link>https://anjanavakil.github.io/tags/cs/</link>
    <description>Recent content in CS💻 on Anjana</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 23 Mar 2022 13:15:48 +0800</lastBuildDate><atom:link href="https://anjanavakil.github.io/tags/cs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Effective Java: implement Comparable</title>
      <link>https://anjanavakil.github.io/post/effective_java_comparable/</link>
      <pubDate>Wed, 23 Mar 2022 13:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_comparable/</guid>
      <description>Effective Java 的笔记，以代码为主，批注为辅。 Item 14: Consider implementing Comparable 考虑实现 Comparable 接口 Virtually all of the value classes in the Java platform libraries, as well as all enum types, implement Comparable. If you are writing a value class with an obvious natural ordering, such as alphabetical order, numerical order, or chronological order, you</description>
    </item>
    
    <item>
      <title>Effective Java: Override equals</title>
      <link>https://anjanavakil.github.io/post/effective_java_overriding_equals/</link>
      <pubDate>Tue, 22 Mar 2022 15:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_overriding_equals/</guid>
      <description>Effective Java 的笔记，以代码为主，批注为辅。 Item 10: Obey the general contract when overriding equals 覆盖 equals 方法时请遵守通用约定 Not to override the equals method 1. Each instance of the class is inherently unique. This is true for classes such as Thread that represent active entities rather than values. The</description>
    </item>
    
    <item>
      <title>Effective Java: Memory Leaks &#43; Garbage Collect</title>
      <link>https://anjanavakil.github.io/post/effective_java_gc/</link>
      <pubDate>Tue, 22 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_gc/</guid>
      <description>Effective Java 的笔记，以代码为主，批注为辅。 Item 7: Eliminate obsolete object references 消除过时的对象引用 Incorrect Version 一个简单的Stack实现的例子： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</description>
    </item>
    
    <item>
      <title>Effective Java: Prefer try-with-resources to try-finally</title>
      <link>https://anjanavakil.github.io/post/effective_java_try_with_resources/</link>
      <pubDate>Tue, 22 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_try_with_resources/</guid>
      <description>Effective Java 的笔记，以代码为主，批注为辅。 Item 9: Prefer try-with-resources to try-finally 使用 try-with-resources 优于 try-finally try-finally 1 2 3 4 5 6 7 8 9 // try-finally - No longer the best way to close resources! static String firstLineOfFile(String path) throws IOException { BufferedReader br = new BufferedReader(new FileReader(path)); try { return br.readLine(); } finally {</description>
    </item>
    
    <item>
      <title>Effective Java: Builder</title>
      <link>https://anjanavakil.github.io/post/effective_java_builder/</link>
      <pubDate>Mon, 21 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_builder/</guid>
      <description>豆瓣🔗: Effective Java 《Effective Java中文版（第3版）》 Effective Java 的笔记，以代码为主，批注为辅。 Item 1: Consider static factory methods instead of constructors 考虑以静态工厂方法代替构造函数</description>
    </item>
    
    <item>
      <title>Effective Java: Dependency Injection</title>
      <link>https://anjanavakil.github.io/post/effective_java_di/</link>
      <pubDate>Mon, 21 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_di/</guid>
      <description>Effective Java 的笔记，以代码为主，批注为辅。 Item 5: Prefer dependency injection to hardwiring resources 优先考虑依赖注入来引入资源 Condition Many classes depend on one or more underlying resources. For example, a spell checker depends on a dictionary. Inappropriate use of static utility - inflexible &amp;amp; untestable! 1 2 3 4</description>
    </item>
    
    <item>
      <title>Coders At Work 编程人生</title>
      <link>https://anjanavakil.github.io/post/coders_at_work/</link>
      <pubDate>Sun, 20 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/coders_at_work/</guid>
      <description>豆瓣🔗: Coders At Work 《编程人生：15位软件先驱访谈录》 第一次读这本书读的是英文版，说实话当时读的云里雾里的😶‍🌫️，读了一章就丢下了，没有太大收获</description>
    </item>
    
    <item>
      <title>Designing Data-Intensive Applications Notes</title>
      <link>https://anjanavakil.github.io/post/designing_data-intensive_applications/</link>
      <pubDate>Thu, 17 Mar 2022 22:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/designing_data-intensive_applications/</guid>
      <description>atomic In the context of concurrent operations: describing an operation that appears to take effect at a single point in time, so another concurrent process can never encounter the operation in a “half-finished” state. See also isolation.
In the context of transactions: grouping together a set of writes that must either all be committed or all be rolled back, even if faults occur.
REST REST is not a protocol, but rather a design philosophy that builds upon the principles of HTTP.</description>
    </item>
    
    <item>
      <title>Lambda表达式</title>
      <link>https://anjanavakil.github.io/post/lambda_expression/</link>
      <pubDate>Sat, 12 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/lambda_expression/</guid>
      <description>之前技术博客都是在CSDN上发表的，好久没用了，登录上去居然有人给我以前的博客点赞评论，尽管很少但发现还是有人看的。看了一下之前写的博客，发</description>
    </item>
    
    <item>
      <title>《编写可读代码的艺术》</title>
      <link>https://anjanavakil.github.io/post/the_art_of_readable_code/</link>
      <pubDate>Fri, 04 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/the_art_of_readable_code/</guid>
      <description>豆瓣🔗：《编写可读代码的艺术》 关于编码规范和编写高质量代码类的书籍，印象中第一本看完的应该是《阿里巴巴Java开发手册》，《编写可读代码的艺</description>
    </item>
    
  </channel>
</rss>
