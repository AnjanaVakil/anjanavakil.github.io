<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS💻 on Anjana</title>
    <link>https://anjanavakil.github.io/tags/cs/</link>
    <description>Recent content in CS💻 on Anjana</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 15 Jul 2022 08:15:48 +0800</lastBuildDate><atom:link href="https://anjanavakil.github.io/tags/cs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>StringUtils: leftPad&#43;rightPad</title>
      <link>https://anjanavakil.github.io/post/stringutils/</link>
      <pubDate>Fri, 15 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/stringutils/</guid>
      <description>StringUtils的leftpad和righted方法源码分析 依赖： 1 2 3 4 5 6 &amp;lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.commons&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-lang3&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.12.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; leftPad: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</description>
    </item>
    
    <item>
      <title>Vue</title>
      <link>https://anjanavakil.github.io/post/vue-notes/</link>
      <pubDate>Tue, 12 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/vue-notes/</guid>
      <description>第1章 Vue.js基础 使用Ajax下载一个列表数据并在页面上显示。 第一段使用jQuery实现： 使用jQuery的代码逻辑是下载列表数据，选择</description>
    </item>
    
    <item>
      <title>Spring Batch</title>
      <link>https://anjanavakil.github.io/post/springbatch-notes/</link>
      <pubDate>Mon, 11 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/springbatch-notes/</guid>
      <description>官网示例： Creating a Batch Service Create a Business Class Person.java: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package com.example.batchprocessing; public class Person { private String lastName; private String firstName; public Person() { } public Person(String firstName,</description>
    </item>
    
    <item>
      <title>精彩video</title>
      <link>https://anjanavakil.github.io/post/video/</link>
      <pubDate>Thu, 02 Jun 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/video/</guid>
      <description>网络上看过的精彩讲座/课程/录像/视频等： Jul 15: A Philosophy of Software Design | John Ousterhout | Talks at Google</description>
    </item>
    
    <item>
      <title>OOM</title>
      <link>https://anjanavakil.github.io/post/oom/</link>
      <pubDate>Fri, 20 May 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/oom/</guid>
      <description>3.2 Understand the OutOfMemoryError Exception 翻译+理解： One common indication of a memory leak is the java.lang.OutOfMemoryError exception. Usually, this error is thrown when there is insufficient space to allocate an object in the Java heap. In this case, The garbage collector cannot make space available to accommodate a new object, and the heap cannot be expanded further. Also, this error may be thrown when there</description>
    </item>
    
    <item>
      <title>《编写高质量代码：改善Java程序的151个建议》</title>
      <link>https://anjanavakil.github.io/post/java-code/</link>
      <pubDate>Sun, 15 May 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/java-code/</guid>
      <description>豆瓣🔗： 《编写高质量代码：改善Java程序的151个建议》 第1章 Java开发中通用的方法和准则 11：养成良好习惯，显式声明UID 在序列化和反</description>
    </item>
    
    <item>
      <title>碎片学习笔记</title>
      <link>https://anjanavakil.github.io/post/study/</link>
      <pubDate>Fri, 06 May 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/study/</guid>
      <description>SpringCloud学习 开发阶段，用热部署Devtools，但是一旦上线，应该关掉热部署。 客户消费者端口：80端口(一般用户都是80端口)</description>
    </item>
    
    <item>
      <title>Spring Annotations</title>
      <link>https://anjanavakil.github.io/post/spring-annotations/</link>
      <pubDate>Tue, 03 May 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/spring-annotations/</guid>
      <description>@Autowired 1 2 3 4 5 6 @Target({ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface Autowired { boolean required() default true; } @Autowired has a boolean argument called required with a default value of true. It tunes Spring&amp;rsquo;s behavior when it doesn&amp;rsquo;t find a suitable bean to wire. When true, an exception is thrown, otherwise, nothing is wired. @AliasFor 1 2 3 4 5 6 7 8 9 10</description>
    </item>
    
    <item>
      <title>《凤凰架构》架构师的视角</title>
      <link>https://anjanavakil.github.io/post/the-fenix-project2/</link>
      <pubDate>Sat, 02 Apr 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/the-fenix-project2/</guid>
      <description>架构师的视角 第2章 访问远程服务 2.1 远程服务调用 2.1.1 进程间通信 调用本地方法： 1 2 3 4 5 6 7 8 // Caller: 调用者，代码里的main() // Callee: 被调用者，代码里的</description>
    </item>
    
    <item>
      <title>《凤凰架构》演进中的架构</title>
      <link>https://anjanavakil.github.io/post/the-fenix-project1/</link>
      <pubDate>Fri, 01 Apr 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/the-fenix-project1/</guid>
      <description>豆瓣🔗：《凤凰架构：构建可靠的大型分布式系统》 演进中的架构 第1章 服务架构演进史 架构并不是被发明出来的，而是持续演进的结果。 1.1 原始分布式时代 调</description>
    </item>
    
    <item>
      <title>基于Netty的单体聊天IM系统的设计与实现</title>
      <link>https://anjanavakil.github.io/post/im/</link>
      <pubDate>Thu, 31 Mar 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/im/</guid>
      <description>自定义Protobuf编解码器 Netty内置了一组Protobuf编解码器——ProtobufDecoder解码器和ProtobufEnco</description>
    </item>
    
    <item>
      <title>Enums</title>
      <link>https://anjanavakil.github.io/post/effective-java-enum/</link>
      <pubDate>Wed, 30 Mar 2022 20:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-enum/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 34: Use enums instead of int constants 用enum代替int常量 1 2 3 4 5 6 7 // The int enum pattern - severely deficient! public static final int APPLE_FUJI = 0; public static final int</description>
    </item>
    
    <item>
      <title>Netty</title>
      <link>https://anjanavakil.github.io/post/netty/</link>
      <pubDate>Tue, 29 Mar 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/netty/</guid>
      <description>Netty是一个Java NIO客户端/服务器框架。 Netty中的Reactor模式 Java Reactor模式中IO事件的处理流程： Reactor模</description>
    </item>
    
    <item>
      <title>Reactor模式</title>
      <link>https://anjanavakil.github.io/post/reactor-pattern/</link>
      <pubDate>Mon, 28 Mar 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/reactor-pattern/</guid>
      <description>多线程OIO ServerSocket类用于建立套接字。所有标准服务都不使用端口号8189。 1 2 3 4 5 6 7 8 9 10 11 12 try { //建立一个负责监控端</description>
    </item>
    
    <item>
      <title>Java NIO</title>
      <link>https://anjanavakil.github.io/post/java-nio/</link>
      <pubDate>Sun, 27 Mar 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/java-nio/</guid>
      <description>Java NIO Java NIO属于IO多路复用模型。 IO多路复用 为了提高性能，操作系统引入了一种新的系统调用，专门用于查询IO文件描述符（含socket连接）</description>
    </item>
    
    <item>
      <title>Spring Boot笔记</title>
      <link>https://anjanavakil.github.io/post/springboot-notes/</link>
      <pubDate>Sat, 26 Mar 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/springboot-notes/</guid>
      <description>豆瓣🔗：《SpringBoot+Vue全栈开发实战》 一些SpringBoot陌生部分的笔记。技术类书籍，不能说有多好，但是如果有一份好的代码</description>
    </item>
    
    <item>
      <title>Aha! Algorithms 啊哈！算法</title>
      <link>https://anjanavakil.github.io/post/pp-aha-algorithms/</link>
      <pubDate>Fri, 25 Mar 2022 20:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/pp-aha-algorithms/</guid>
      <description>《编程珠玑》的笔记。 Column 2: Aha! Algorithms 三个问题 A.给定一个最多包含40亿个随机排列的32位整数的顺序文件，找出一个不在文件中的32位整数（在文件中至少</description>
    </item>
    
    <item>
      <title>Cracking the Oyster 开篇</title>
      <link>https://anjanavakil.github.io/post/pp-cracking-the-oyster/</link>
      <pubDate>Thu, 24 Mar 2022 20:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/pp-cracking-the-oyster/</guid>
      <description>《编程珠玑》的笔记。 作者 Jon Bentley 推荐的阅读方法，因此每次完成一章，重点是自己思考习题。 One hint about reading the essays: don’t go too fast. Read them carefully, one per sitting. Try the problems as they are posed — some</description>
    </item>
    
    <item>
      <title>Generics</title>
      <link>https://anjanavakil.github.io/post/effective-java-generic/</link>
      <pubDate>Wed, 23 Mar 2022 20:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-generic/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 26: Don’t use raw types 请不要使用原始类型（ raw types 实在不知道该怎么翻译🤷🏻‍♀️，中文版书籍译为原</description>
    </item>
    
    <item>
      <title>implement Comparable</title>
      <link>https://anjanavakil.github.io/post/effective-java-comparable/</link>
      <pubDate>Wed, 23 Mar 2022 13:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-comparable/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 14: Consider implementing Comparable 考虑实现 Comparable 接口 Virtually all of the value classes in the Java platform libraries, as well as all enum types, implement Comparable. If you are writing a value class with an obvious natural ordering, such as alphabetical</description>
    </item>
    
  </channel>
</rss>
