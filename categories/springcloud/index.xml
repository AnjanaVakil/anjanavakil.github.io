<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SpringCloud🌵 on Anjana</title>
    <link>https://anjanavakil.github.io/categories/springcloud/</link>
    <description>Recent content in SpringCloud🌵 on Anjana</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 02 Apr 2022 08:15:48 +0800</lastBuildDate><atom:link href="https://anjanavakil.github.io/categories/springcloud/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>《凤凰架构》架构师的视角</title>
      <link>https://anjanavakil.github.io/post/the-fenix-project2/</link>
      <pubDate>Sat, 02 Apr 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/the-fenix-project2/</guid>
      <description>架构师的视角 第2章 访问远程服务 2.1 远程服务调用 2.1.1 进程间通信 调用本地方法： 1 2 3 4 5 6 7 8 // Caller: 调用者，代码里的main() // Callee: 被调用者，代码里的</description>
    </item>
    
    <item>
      <title>《凤凰架构》演进中的架构</title>
      <link>https://anjanavakil.github.io/post/the-fenix-project1/</link>
      <pubDate>Fri, 01 Apr 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/the-fenix-project1/</guid>
      <description>豆瓣🔗：《凤凰架构：构建可靠的大型分布式系统》 演进中的架构 第1章 服务架构演进史 架构并不是被发明出来的，而是持续演进的结果。 1.1 原始分布式时代 调</description>
    </item>
    
    <item>
      <title>基于Netty的单体聊天IM系统的设计与实现</title>
      <link>https://anjanavakil.github.io/post/im/</link>
      <pubDate>Thu, 31 Mar 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/im/</guid>
      <description>自定义Protobuf编解码器 Netty内置了一组Protobuf编解码器——ProtobufDecoder解码器和ProtobufEnco</description>
    </item>
    
    <item>
      <title>Netty</title>
      <link>https://anjanavakil.github.io/post/netty/</link>
      <pubDate>Tue, 29 Mar 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/netty/</guid>
      <description>Netty是一个Java NIO客户端/服务器框架。 Netty中的Reactor模式 Java Reactor模式中IO事件的处理流程： Reactor模</description>
    </item>
    
    <item>
      <title>Reactor模式</title>
      <link>https://anjanavakil.github.io/post/reactor-pattern/</link>
      <pubDate>Mon, 28 Mar 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/reactor-pattern/</guid>
      <description>多线程OIO ServerSocket类用于建立套接字。所有标准服务都不使用端口号8189。 1 2 3 4 5 6 7 8 9 10 11 12 try { //建立一个负责监控端</description>
    </item>
    
    <item>
      <title>Java NIO</title>
      <link>https://anjanavakil.github.io/post/java-nio/</link>
      <pubDate>Sun, 27 Mar 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/java-nio/</guid>
      <description>Java NIO Java NIO属于IO多路复用模型。 IO多路复用 为了提高性能，操作系统引入了一种新的系统调用，专门用于查询IO文件描述符（含socket连接）</description>
    </item>
    
  </channel>
</rss>
