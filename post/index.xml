<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Anjana</title>
    <link>https://anjanavakil.github.io/post/</link>
    <description>Recent content in Posts on Anjana</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 10 Oct 2022 08:15:48 +0800</lastBuildDate><atom:link href="https://anjanavakil.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; Notes</title>
      <link>https://anjanavakil.github.io/post/cpp/</link>
      <pubDate>Mon, 10 Oct 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/cpp/</guid>
      <description>C++ Introduction to C++11 and C++14 with Example Code Snippet
4 Lamba Expressions of Lambda Functions 1  [firstPart](secondPart) TypeYouReturn{ BodyOfLambda}(acctualParameters);   lambda function:
1  double dUpperPart=[]{double dX, double dY}double{return dX*dX+dY*dY;}   1 2 3 4  vector&amp;lt;int&amp;gt; iVector; for_each(begin(iVector),end(iVector),[](int n){ if(n%2==0) cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; endl; });   5 Static Assertion 1  static_assert(evaluateExpression, stringMessage);   1  static_assert(sizeof(long long int)&amp;gt;=16;&amp;#34;This is unexpected&amp;#34;);   7 move and &amp;amp;&amp;amp; 1 2  MovableClass(MovableClass&amp;amp;&amp;amp;); MOvableClass&amp;amp;&amp;amp; operator=(MovableClass&amp;amp;&amp;amp;);   8 Few Notes about Pointers unique_ptr: If something has ownership it could not be shared, but it is movable.</description>
    </item>
    
    <item>
      <title>Linux Kernel Development</title>
      <link>https://anjanavakil.github.io/post/linux-kernel-development/</link>
      <pubDate>Wed, 05 Oct 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/linux-kernel-development/</guid>
      <description>豆瓣🔗: 英文版： Linux Kernel Development 中文版： 《Linux内核设计与实现》 1 Introduction to the Linux Kernel 2 Getting Started with the Kernel 1 2 3 4 5 # git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux-2.6.git Cloning into &amp;#39;linux-2.6&amp;#39;... remote: Enumerating objects: 4084, done. ... # cd linux-2.6 This command creates a configuration based on the</description>
    </item>
    
    <item>
      <title>Joel on Software</title>
      <link>https://anjanavakil.github.io/post/joel-on-software/</link>
      <pubDate>Tue, 04 Oct 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/joel-on-software/</guid>
      <description>豆瓣🔗: 英文版： Joel on Software More Joel on Software 中文版： 《软件随想录 卷1》 《软件随想录 卷2》 作者BLOG： Joel Spolsky: https://www.joelonsoftware.com/ 电子书看多了真的需要换纸质书籍读读。这本书是阮</description>
    </item>
    
    <item>
      <title>Hackers and Painters: Big Ideas from the Computer Age</title>
      <link>https://anjanavakil.github.io/post/hackers-and-painters/</link>
      <pubDate>Sat, 01 Oct 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/hackers-and-painters/</guid>
      <description>豆瓣🔗: 英文版： Hackers &amp;amp; Painters: Big Ideas from the Computer Age 中文版： 《黑客与画家》 作者BLOG： Paul Graham: http://www.paulgraham.com/ 《黑客与画家》零零散散加起来应该算是看过两遍了。第一遍（大一or</description>
    </item>
    
    <item>
      <title>Effective C&#43;&#43;</title>
      <link>https://anjanavakil.github.io/post/effective-c&#43;&#43;/</link>
      <pubDate>Fri, 30 Sep 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-c&#43;&#43;/</guid>
      <description>豆瓣🔗: 英文版：Effective C++ Third Edition 中文版：Effective C++ Effective C++ Scott Meyers Third Edition 55 Specific Ways to Improve Your Programs and Designs C++ 提供了4种不同又相辅相成的编程泛型(pr</description>
    </item>
    
    <item>
      <title>Decision Procedures</title>
      <link>https://anjanavakil.github.io/post/decision-procedures/</link>
      <pubDate>Wed, 28 Sep 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/decision-procedures/</guid>
      <description>Decision Procedures An Algorithmic Point of View Foreword to the first edition 刚开始阅读的时候没注意，第二遍阅读的时候发现foreword是Randal E. Bryant写的，就觉得这个名字很熟悉，</description>
    </item>
    
    <item>
      <title>Formal Methods</title>
      <link>https://anjanavakil.github.io/post/formal-methods/</link>
      <pubDate>Mon, 26 Sep 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/formal-methods/</guid>
      <description>🔗: Use of Formal Methods at Amazon Web Services
Use of Formal Methods at Amazon Web Services To safeguard that data, the core of each service relies on fault-tolerant distributed algorithms for replication, consistency, concurrency control, auto-scaling, load balancing, and other coordination tasks.
We use deep design reviews, code reviews, static code analysis, stress testing, fault-injection testing, and many other techniques, but we still find that subtle bugs can hide in complex concurrent fault-tolerant systems.</description>
    </item>
    
    <item>
      <title>Architectural styles and the Design of Network-based Software Architectures</title>
      <link>https://anjanavakil.github.io/post/architectural-styles/</link>
      <pubDate>Tue, 20 Sep 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/architectural-styles/</guid>
      <description>Architectural styles and the Design of Network-based Software Architectures Roy Thomas Fielding
Acknowledgments The modern Web architecture is still defined more by the work of individual volunteers than by any single company.
Introduction Software architecture research investigates methods for determining hwo best to partition a system, how componentes identify and communicate with each other, how information is communicated, how elements of a system can evolve independently, how all of the above can be described using formal and informal notations.</description>
    </item>
    
    <item>
      <title>Software Engineering: A Practitioner&#39;s Approach</title>
      <link>https://anjanavakil.github.io/post/software-engineering/</link>
      <pubDate>Sun, 11 Sep 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/software-engineering/</guid>
      <description>研一&amp;quot;软件工程与软件过程&amp;quot;课程书籍——SEPA(Software Engineering: A Practitioner&amp;rsquo;s Approach)笔记。 PREFACE CHAPTER 1: Software And Software Engineering KEY CONCEPTS: application domains characteristics of</description>
    </item>
    
    <item>
      <title>Middleware</title>
      <link>https://anjanavakil.github.io/post/middleware/</link>
      <pubDate>Thu, 01 Sep 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/middleware/</guid>
      <description>9.30更新：这本书应该不会再看下去了，本来想的是中文书自己没有基础可以一看，但发现干货真的不多，全文都是在贴代码，并且文字有点冗余。人生短</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://anjanavakil.github.io/post/k8s/</link>
      <pubDate>Sat, 20 Aug 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/k8s/</guid>
      <description>豆瓣🔗： Kubernetes网络权威指南：基础、原理与实践 9.30更新：这本书应该不会再看下去了。豆瓣评价不多且差评蛮多，有几个好评才决定看</description>
    </item>
    
    <item>
      <title>Go</title>
      <link>https://anjanavakil.github.io/post/go/</link>
      <pubDate>Thu, 11 Aug 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/go/</guid>
      <description>编程语言都是相通的，所以通过记录与其他语言不同的部分学习Go语言。 Reference: Go 语言教程 Go基础语法 1、当标识符（包括常量、变量、类型、函数名、结构字</description>
    </item>
    
    <item>
      <title>LeetCode Greedy</title>
      <link>https://anjanavakil.github.io/post/leetcode-greedy/</link>
      <pubDate>Fri, 05 Aug 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-greedy/</guid>
      <description>LeetCode + 《剑指Offer II》刷题笔记。 贪心 870 Advantage Shuffle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public int[] advantageCount(int[] nums1, int[] nums2) { int n=nums1.length; TreeMap&amp;lt;Integer,Integer&amp;gt; map=new TreeMap&amp;lt;&amp;gt;(); for(int num:nums1){ map.put(num,map.getOrDefault(num,0)+1); } int[] ans=new int[n]; for(int i=0;i&amp;lt;n;i++){</description>
    </item>
    
    <item>
      <title>Java Concurrency-JUC</title>
      <link>https://anjanavakil.github.io/post/juc/</link>
      <pubDate>Mon, 01 Aug 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/juc/</guid>
      <description>Package java.util.concurrent Description Utility classes commonly useful in concurrent programming. This package includes a few small standardized extensible frameworks, as well as some classes that provide useful functionality and are otherwise tedious or difficult to implement. Here are brief descriptions of the main components. See also the java.util.concurrent.locks and java.util.concurrent.atomic packages. Executors Interfaces. Executoris a simple standardized interface for defining custom thread-like subsystems, including thread pools, asynchronous I/O, and lightweight</description>
    </item>
    
    <item>
      <title>SQL</title>
      <link>https://anjanavakil.github.io/post/sql/</link>
      <pubDate>Sat, 30 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/sql/</guid>
      <description>Difference between count() 参考🔗： What is the Difference Between COUNT(*), COUNT(1), COUNT(column name), and COUNT(DISTINCT column name)? 很不错的文章，果然还是看英文靠谱点。 The COUNT() function belongs to SQL’s aggregate functions. It counts the number of rows that satisfy the criteria defined in the parentheses. It does not return the rows</description>
    </item>
    
    <item>
      <title>LeetCode Graph</title>
      <link>https://anjanavakil.github.io/post/leetcode-graph/</link>
      <pubDate>Thu, 28 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-graph/</guid>
      <description>LeetCode + 《剑指Offer II》刷题笔记。 图 图的搜索 如果要求在无权图中找出两个节点之间的最短距离，那么广度优先搜索可能是更合适的算法。 如果面试题要</description>
    </item>
    
    <item>
      <title>The Effective Engineer</title>
      <link>https://anjanavakil.github.io/post/the-effective-engineer/</link>
      <pubDate>Mon, 25 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/the-effective-engineer/</guid>
      <description>豆瓣🔗： The Effective Engineer: How to Leverage Your Efforts in Software Engineering to Make a Disproportionate and Meaningful Impact Talks at Google🔗: The Effective Engineer | Edmond Lau | Talks at Google 大概是3、4月份读的英文版，发现7月份出了翻译版，对我来</description>
    </item>
    
    <item>
      <title>Java Source Code</title>
      <link>https://anjanavakil.github.io/post/java-source-code/</link>
      <pubDate>Fri, 22 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/java-source-code/</guid>
      <description>2022.8.9总结反思：看起来好像分析源码挺久了，但是每次都只是读一遍源码、注释和Java doc，然后Command+C复制、Comman</description>
    </item>
    
    <item>
      <title>LeetCode Queue</title>
      <link>https://anjanavakil.github.io/post/leetcode-queue/</link>
      <pubDate>Thu, 21 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-queue/</guid>
      <description>LeetCode + 《剑指Offer II》刷题笔记。 队列 滑动窗口 剑指 Offer II 041. 滑动窗口的平均值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class MovingAverage { public: queue&amp;lt;int&amp;gt; q; int</description>
    </item>
    
    <item>
      <title>LeetCode Stack</title>
      <link>https://anjanavakil.github.io/post/leetcode-stack/</link>
      <pubDate>Wed, 20 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-stack/</guid>
      <description>LeetCode + 《剑指Offer II》刷题笔记。 栈 剑指 Offer II 036. 后缀表达式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { public: int evalRPN(vector&amp;lt;string&amp;gt;&amp;amp; tokens) { stack&amp;lt;int&amp;gt; s; int a,b,res; for(string&amp;amp;</description>
    </item>
    
  </channel>
</rss>
