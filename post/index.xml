<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Anjana</title>
    <link>https://anjanavakil.github.io/post/</link>
    <description>Recent content in Posts on Anjana</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 24 Mar 2022 20:15:48 +0800</lastBuildDate><atom:link href="https://anjanavakil.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Code: The Hidden Language of Computer Hardware and Software</title>
      <link>https://anjanavakil.github.io/post/code/</link>
      <pubDate>Fri, 25 Feb 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/code/</guid>
      <description>豆瓣🔗：Code: The Hidden Language of Computer Hardware and Software 第一遍读的是中文版，寒假期间重读了英文版。这应该是第一本读完的英文专业书籍。读的过程中还是稍微有些困难的，</description>
    </item>
    
    <item>
      <title>Cracking the Oyster 开篇</title>
      <link>https://anjanavakil.github.io/post/pp_cracking-the-oyster/</link>
      <pubDate>Thu, 24 Mar 2022 20:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/pp_cracking-the-oyster/</guid>
      <description>《编程珠玑》的笔记。 作者 Jon Bentley 推荐的阅读方法，因此每次完成一章，重点是自己思考习题。 One hint about reading the essays: don’t go too fast. Read them carefully, one per sitting. Try the problems as they are posed — some</description>
    </item>
    
    <item>
      <title>Generics</title>
      <link>https://anjanavakil.github.io/post/effective_java_generic/</link>
      <pubDate>Wed, 23 Mar 2022 20:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_generic/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 26: Don’t use raw types 请不要使用原始类型（ raw types 实在不知道该怎么翻译🤷🏻‍♀️，中文版书籍译为原</description>
    </item>
    
    <item>
      <title>implement Comparable</title>
      <link>https://anjanavakil.github.io/post/effective_java_comparable/</link>
      <pubDate>Wed, 23 Mar 2022 13:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_comparable/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 14: Consider implementing Comparable 考虑实现 Comparable 接口 Virtually all of the value classes in the Java platform libraries, as well as all enum types, implement Comparable. If you are writing a value class with an obvious natural ordering, such as alphabetical</description>
    </item>
    
    <item>
      <title>override equals</title>
      <link>https://anjanavakil.github.io/post/effective_java_overriding_equals/</link>
      <pubDate>Tue, 22 Mar 2022 15:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_overriding_equals/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 10: Obey the general contract when overriding equals 覆盖 equals 方法时请遵守通用约定 Not to override the equals method 1. Each instance of the class is inherently unique. This is true for classes such as Thread that</description>
    </item>
    
    <item>
      <title>Memory Leaks &#43; Garbage Collect</title>
      <link>https://anjanavakil.github.io/post/effective_java_gc/</link>
      <pubDate>Tue, 22 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_gc/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 7: Eliminate obsolete object references 消除过时的对象引用 Incorrect Version 一个简单的Stack实现的例子： 1 2 3 4 5 6 7 8 9 10 11 12 13</description>
    </item>
    
    <item>
      <title>Prefer try-with-resources to try-finally</title>
      <link>https://anjanavakil.github.io/post/effective_java_try_with_resources/</link>
      <pubDate>Tue, 22 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_try_with_resources/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 9: Prefer try-with-resources to try-finally 使用 try-with-resources 优于 try-finally try-finally 1 2 3 4 5 6 7 8 9 // try-finally - No longer the best way to close resources! static String firstLineOfFile(String path) throws IOException { BufferedReader br = new BufferedReader(new FileReader(path));</description>
    </item>
    
    <item>
      <title>Builder</title>
      <link>https://anjanavakil.github.io/post/effective_java_builder/</link>
      <pubDate>Mon, 21 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_builder/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 2: Consider a builder when faced with many constructor parameters 当构造函数有多个参数时，考虑使用builder模式 1. Telescoping constructor pattern - does not scale well! 1</description>
    </item>
    
    <item>
      <title>Coders At Work: Brad Fitzpatrick</title>
      <link>https://anjanavakil.github.io/post/coders_at_work-brad-fitzpatrick/</link>
      <pubDate>Sun, 20 Mar 2022 15:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/coders_at_work-brad-fitzpatrick/</guid>
      <description>Brad Fitzpatrick 书中唯一的80后，LiveJournal和memcached开发者。现效力于Google。 1、学习东西 Seibel: It does seem that while you were writing all this stuff because you needed it, you</description>
    </item>
    
    <item>
      <title>Coders At Work: Jamie Zawinski</title>
      <link>https://anjanavakil.github.io/post/coders_at_work-jamie-zawinski/</link>
      <pubDate>Sun, 20 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/coders_at_work-jamie-zawinski/</guid>
      <description>豆瓣🔗: Coders At Work 《编程人生：15位软件先驱访谈录》 第一次读这本书读的是英文版，说实话当时读的云里雾里的😶‍🌫️，读了一章就丢下了，没有太大收获</description>
    </item>
    
    <item>
      <title>static factory method VS constructor</title>
      <link>https://anjanavakil.github.io/post/effective-java-static-factory-method/</link>
      <pubDate>Sat, 19 Mar 2022 10:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-static-factory-method/</guid>
      <description>豆瓣🔗: Effective Java 《Effective Java中文版（第3版）》 Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 1: Consider static factory methods instead of constructors 考虑以静态工厂方</description>
    </item>
    
    <item>
      <title>Designing Data-Intensive Applications Notes</title>
      <link>https://anjanavakil.github.io/post/designing_data-intensive_applications/</link>
      <pubDate>Thu, 17 Mar 2022 22:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/designing_data-intensive_applications/</guid>
      <description>atomic In the context of concurrent operations: describing an operation that appears to take effect at a single point in time, so another concurrent process can never encounter the operation in a “half-finished” state. See also isolation.
In the context of transactions: grouping together a set of writes that must either all be committed or all be rolled back, even if faults occur.
REST REST is not a protocol, but rather a design philosophy that builds upon the principles of HTTP.</description>
    </item>
    
    <item>
      <title>Show Your Work!</title>
      <link>https://anjanavakil.github.io/post/show_your_work/</link>
      <pubDate>Wed, 16 Mar 2022 21:00:00 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/show_your_work/</guid>
      <description>douban🔗: Show Your Work! 10 Ways to Share Your Creativity and Get Discovered  This is my first English book review for the second English book I entirely finished reading in 2022!
The book is brief and there is not a lot of unfamiliar vocabulary so I read it in two hours. The author listed 10 approaches for ordinary individuals to share creativity and get discovered. The book demonstrated how to think about one&amp;rsquo;s work as a never-ending process, how to share one&amp;rsquo;s process in a way that attracts people who might be interested in what they do, and how to deal with the ups and downs of putting oneself and one&amp;rsquo;s work out in the world.</description>
    </item>
    
    <item>
      <title>Lambda表达式</title>
      <link>https://anjanavakil.github.io/post/lambda_expression/</link>
      <pubDate>Sat, 12 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/lambda_expression/</guid>
      <description>之前技术博客都是在CSDN上发表的，好久没用了，登录上去居然有人给我以前的博客点赞评论，尽管很少但发现还是有人看的。看了一下之前写的博客，发</description>
    </item>
    
    <item>
      <title>《编写可读代码的艺术》</title>
      <link>https://anjanavakil.github.io/post/the_art_of_readable_code/</link>
      <pubDate>Fri, 04 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/the_art_of_readable_code/</guid>
      <description>豆瓣🔗：《编写可读代码的艺术》 关于编码规范和编写高质量代码类的书籍，印象中第一本看完的应该是《阿里巴巴Java开发手册》，《编写可读代码的艺</description>
    </item>
    
    <item>
      <title>2022年1月~2月陌生词汇</title>
      <link>https://anjanavakil.github.io/post/vocabulary_2022_1_2/</link>
      <pubDate>Mon, 28 Feb 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/vocabulary_2022_1_2/</guid>
      <description>每个人的基础以及敏感偏好都不同。如果每次备考都背单词书的话，对我而言总是在重复会的单词，但不会的单词并不会得到太大的重视，因此记录下每天英文</description>
    </item>
    
    <item>
      <title>CS 基础知识笔记</title>
      <link>https://anjanavakil.github.io/post/408/</link>
      <pubDate>Sat, 12 Feb 2022 20:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/408/</guid>
      <description>CS 基础知识的笔记，不算是总结性的笔记，只是曾经备忘录上记录下来的和对于自己陌生的点，或许应该保存到blog上，抑或是考试教育的一种印证。 CO 1</description>
    </item>
    
    <item>
      <title>《世界因你不同：李开复自传》</title>
      <link>https://anjanavakil.github.io/post/the_kai_fulee_story/</link>
      <pubDate>Thu, 10 Feb 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/the_kai_fulee_story/</guid>
      <description>豆瓣🔗：《世界因你不同：李开复自传》 回家路上😷+在家床上🤣看完的一本自传。 1、前面读到李开复在上学时期的调皮捣蛋，记得自己当时差点在飞机上笑</description>
    </item>
    
    <item>
      <title>《影响商业的50本书》</title>
      <link>https://anjanavakil.github.io/post/50_business_must_reads/</link>
      <pubDate>Thu, 10 Feb 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/50_business_must_reads/</guid>
      <description>豆瓣🔗：《影响商业的50本书》 算是作者对商业书籍的书评汇总起来的解说式的书籍，收获颇丰。 1、对一些事物不同维度和方向的思考：作为金融商业领域</description>
    </item>
    
    <item>
      <title>关于阅读</title>
      <link>https://anjanavakil.github.io/post/read_summary_2022/</link>
      <pubDate>Tue, 01 Feb 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/read_summary_2022/</guid>
      <description>一直觉得阅读也只不过是排解人生无聊的陪伴，不太喜欢阅读如何如何好之类的说辞，但是有次在微读看到有书友这样写： 读书和思考是一件辛苦的事，像暗夜</description>
    </item>
    
  </channel>
</rss>
