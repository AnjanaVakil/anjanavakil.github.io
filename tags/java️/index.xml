<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java☕️ on Anjana</title>
    <link>https://anjanavakil.github.io/tags/java%EF%B8%8F/</link>
    <description>Recent content in Java☕️ on Anjana</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 12 Jul 2022 08:15:48 +0800</lastBuildDate><atom:link href="https://anjanavakil.github.io/tags/java%EF%B8%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue</title>
      <link>https://anjanavakil.github.io/post/vue-notes/</link>
      <pubDate>Tue, 12 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/vue-notes/</guid>
      <description>第1章 Vue.js基础 使用Ajax下载一个列表数据并在页面上显示。 第一段使用jQuery实现： 使用jQuery的代码逻辑是下载列表数据，选择</description>
    </item>
    
    <item>
      <title>Spring Batch</title>
      <link>https://anjanavakil.github.io/post/springbatch-notes/</link>
      <pubDate>Mon, 11 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/springbatch-notes/</guid>
      <description>官网示例： Creating a Batch Service Create a Business Class Person.java: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package com.example.batchprocessing; public class Person { private String lastName; private String firstName; public Person() { } public Person(String firstName,</description>
    </item>
    
    <item>
      <title>Java编码</title>
      <link>https://anjanavakil.github.io/post/java-code/</link>
      <pubDate>Sun, 15 May 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/java-code/</guid>
      <description>豆瓣🔗： 《编写高质量代码：改善Java程序的151个建议》 第1章 Java开发中通用的方法和准则 11：养成良好习惯，显式声明UID 在序列化和反</description>
    </item>
    
    <item>
      <title>Spring Annotations</title>
      <link>https://anjanavakil.github.io/post/spring-annotations/</link>
      <pubDate>Tue, 03 May 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/spring-annotations/</guid>
      <description>@Autowired 1 2 3 4 5 6 @Target({ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface Autowired { boolean required() default true; } @Autowired has a boolean argument called required with a default value of true. It tunes Spring&amp;rsquo;s behavior when it doesn&amp;rsquo;t find a suitable bean to wire. When true, an exception is thrown, otherwise, nothing is wired. @AliasFor 1 2 3 4 5 6 7 8 9 10</description>
    </item>
    
    <item>
      <title>《凤凰架构》架构师的视角</title>
      <link>https://anjanavakil.github.io/post/the-fenix-project2/</link>
      <pubDate>Sat, 02 Apr 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/the-fenix-project2/</guid>
      <description>架构师的视角 第2章 访问远程服务 2.1 远程服务调用 2.1.1 进程间通信 调用本地方法： 1 2 3 4 5 6 7 8 // Caller: 调用者，代码里的main() // Callee: 被调用者，代码里的</description>
    </item>
    
    <item>
      <title>《凤凰架构》演进中的架构</title>
      <link>https://anjanavakil.github.io/post/the-fenix-project1/</link>
      <pubDate>Fri, 01 Apr 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/the-fenix-project1/</guid>
      <description>豆瓣🔗：《凤凰架构：构建可靠的大型分布式系统》 演进中的架构 第1章 服务架构演进史 架构并不是被发明出来的，而是持续演进的结果。 1.1 原始分布式时代 调</description>
    </item>
    
    <item>
      <title>基于Netty的单体聊天IM系统的设计与实现</title>
      <link>https://anjanavakil.github.io/post/im/</link>
      <pubDate>Thu, 31 Mar 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/im/</guid>
      <description>自定义Protobuf编解码器 Netty内置了一组Protobuf编解码器——ProtobufDecoder解码器和ProtobufEnco</description>
    </item>
    
    <item>
      <title>Enums</title>
      <link>https://anjanavakil.github.io/post/effective-java-enum/</link>
      <pubDate>Wed, 30 Mar 2022 20:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-enum/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 34: Use enums instead of int constants 用enum代替int常量 1 2 3 4 5 6 7 // The int enum pattern - severely deficient! public static final int APPLE_FUJI = 0; public static final int</description>
    </item>
    
    <item>
      <title>Netty</title>
      <link>https://anjanavakil.github.io/post/netty/</link>
      <pubDate>Tue, 29 Mar 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/netty/</guid>
      <description>Netty是一个Java NIO客户端/服务器框架。 Netty中的Reactor模式 Java Reactor模式中IO事件的处理流程： Reactor模</description>
    </item>
    
    <item>
      <title>Reactor模式</title>
      <link>https://anjanavakil.github.io/post/reactor-pattern/</link>
      <pubDate>Mon, 28 Mar 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/reactor-pattern/</guid>
      <description>多线程OIO ServerSocket类用于建立套接字。所有标准服务都不使用端口号8189。 1 2 3 4 5 6 7 8 9 10 11 12 try { //建立一个负责监控端</description>
    </item>
    
    <item>
      <title>Java NIO</title>
      <link>https://anjanavakil.github.io/post/java-nio/</link>
      <pubDate>Sun, 27 Mar 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/java-nio/</guid>
      <description>Java NIO Java NIO属于IO多路复用模型。 IO多路复用 为了提高性能，操作系统引入了一种新的系统调用，专门用于查询IO文件描述符（含socket连接）</description>
    </item>
    
    <item>
      <title>Spring Boot笔记</title>
      <link>https://anjanavakil.github.io/post/springboot-notes/</link>
      <pubDate>Sat, 26 Mar 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/springboot-notes/</guid>
      <description>豆瓣🔗：《SpringBoot+Vue全栈开发实战》 一些SpringBoot陌生部分的笔记。技术类书籍，不能说有多好，但是如果有一份好的代码</description>
    </item>
    
    <item>
      <title>Generics</title>
      <link>https://anjanavakil.github.io/post/effective-java-generic/</link>
      <pubDate>Wed, 23 Mar 2022 20:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-generic/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 26: Don’t use raw types 请不要使用原始类型（ raw types 实在不知道该怎么翻译🤷🏻‍♀️，中文版书籍译为原</description>
    </item>
    
    <item>
      <title>implement Comparable</title>
      <link>https://anjanavakil.github.io/post/effective-java-comparable/</link>
      <pubDate>Wed, 23 Mar 2022 13:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-comparable/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 14: Consider implementing Comparable 考虑实现 Comparable 接口 Virtually all of the value classes in the Java platform libraries, as well as all enum types, implement Comparable. If you are writing a value class with an obvious natural ordering, such as alphabetical</description>
    </item>
    
    <item>
      <title>override equals</title>
      <link>https://anjanavakil.github.io/post/effective-java-overriding-equals/</link>
      <pubDate>Tue, 22 Mar 2022 15:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-overriding-equals/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 10: Obey the general contract when overriding equals 覆盖 equals 方法时请遵守通用约定 Not to override the equals method 1. Each instance of the class is inherently unique. This is true for classes such as Thread that</description>
    </item>
    
    <item>
      <title>Memory Leaks &#43; Garbage Collect</title>
      <link>https://anjanavakil.github.io/post/effective-java-gc/</link>
      <pubDate>Tue, 22 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-gc/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 7: Eliminate obsolete object references 消除过时的对象引用 Incorrect Version 一个简单的Stack实现的例子： 1 2 3 4 5 6 7 8 9 10 11 12 13</description>
    </item>
    
    <item>
      <title>Prefer try-with-resources to try-finally</title>
      <link>https://anjanavakil.github.io/post/effective-java-try-with-resources/</link>
      <pubDate>Tue, 22 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-try-with-resources/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 9: Prefer try-with-resources to try-finally 使用 try-with-resources 优于 try-finally try-finally 1 2 3 4 5 6 7 8 9 // try-finally - No longer the best way to close resources! static String firstLineOfFile(String path) throws IOException { BufferedReader br = new BufferedReader(new FileReader(path));</description>
    </item>
    
    <item>
      <title>Builder</title>
      <link>https://anjanavakil.github.io/post/effective-java-builder/</link>
      <pubDate>Mon, 21 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-builder/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 2: Consider a builder when faced with many constructor parameters 当构造函数有多个参数时，考虑使用builder模式 1. Telescoping constructor pattern - does not scale well! 1</description>
    </item>
    
    <item>
      <title>static factory method VS constructor</title>
      <link>https://anjanavakil.github.io/post/effective-java-static-factory-method/</link>
      <pubDate>Sat, 19 Mar 2022 10:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-static-factory-method/</guid>
      <description>豆瓣🔗: Effective Java 《Effective Java中文版（第3版）》 Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 1: Consider static factory methods instead of constructors 考虑以静态工厂方</description>
    </item>
    
    <item>
      <title>Lambda表达式</title>
      <link>https://anjanavakil.github.io/post/lambda-expression/</link>
      <pubDate>Sat, 12 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/lambda-expression/</guid>
      <description>之前技术博客都是在CSDN上发表的，好久没用了，登录上去居然有人给我以前的博客点赞评论，尽管很少但发现还是有人看的。看了一下之前写的博客，发</description>
    </item>
    
  </channel>
</rss>
