<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Anjana</title>
    <link>https://anjanavakil.github.io/post/</link>
    <description>Recent content in Posts on Anjana</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 11 Sep 2022 08:15:48 +0800</lastBuildDate><atom:link href="https://anjanavakil.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Software Engineering: A Practitioner&#39;s Approach</title>
      <link>https://anjanavakil.github.io/post/software-engineering/</link>
      <pubDate>Sun, 11 Sep 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/software-engineering/</guid>
      <description>研一&amp;quot;软件工程与软件过程&amp;quot;课程书籍——SEPA(Software Engineering: A Practitioner&amp;rsquo;s Approach)的笔记。 PREFACE CHAPTER 1: Software And Software Engineering KEY CONCEPTS: application domains characteristics</description>
    </item>
    
    <item>
      <title>Go语言</title>
      <link>https://anjanavakil.github.io/post/go/</link>
      <pubDate>Thu, 11 Aug 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/go/</guid>
      <description>编程语言都是相通的，所以通过记录与其他语言不同的部分学习Go语言。 Reference: Go 语言教程 Go基础语法 1、当标识符（包括常量、变量、类型、函数名、结构字</description>
    </item>
    
    <item>
      <title>Java并发-JUC</title>
      <link>https://anjanavakil.github.io/post/juc/</link>
      <pubDate>Mon, 01 Aug 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/juc/</guid>
      <description>Package java.util.concurrent Description Utility classes commonly useful in concurrent programming. This package includes a few small standardized extensible frameworks, as well as some classes that provide useful functionality and are otherwise tedious or difficult to implement. Here are brief descriptions of the main components. See also the java.util.concurrent.locks and java.util.concurrent.atomic packages. Executors Interfaces. Executoris a simple standardized interface for defining custom thread-like subsystems, including thread pools, asynchronous I/O, and lightweight</description>
    </item>
    
    <item>
      <title>SQL</title>
      <link>https://anjanavakil.github.io/post/sql/</link>
      <pubDate>Sat, 30 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/sql/</guid>
      <description>Difference between count() 参考🔗： What is the Difference Between COUNT(*), COUNT(1), COUNT(column name), and COUNT(DISTINCT column name)? 很不错的文章，果然还是看英文靠谱点。 The COUNT() function belongs to SQL’s aggregate functions. It counts the number of rows that satisfy the criteria defined in the parentheses. It does not return the rows</description>
    </item>
    
    <item>
      <title>LeetCode Graph</title>
      <link>https://anjanavakil.github.io/post/leetcode-graph/</link>
      <pubDate>Thu, 28 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-graph/</guid>
      <description>LeetCode + 《剑指Offer II》刷题笔记。 图 如果要求在无权图中找出两个节点之间的最短距离，那么广度优先搜索可能是更合适的算法。 如果面试题要求找出符</description>
    </item>
    
    <item>
      <title>The Effective Engineer</title>
      <link>https://anjanavakil.github.io/post/the-effective-engineer/</link>
      <pubDate>Mon, 25 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/the-effective-engineer/</guid>
      <description>豆瓣🔗： The Effective Engineer: How to Leverage Your Efforts in Software Engineering to Make a Disproportionate and Meaningful Impact Talks at Google🔗: The Effective Engineer | Edmond Lau | Talks at Google 大概是3、4月份读的英文版，发现7月份出了翻译版，对我来</description>
    </item>
    
    <item>
      <title>Java源码阅读分析</title>
      <link>https://anjanavakil.github.io/post/java-source-code/</link>
      <pubDate>Fri, 22 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/java-source-code/</guid>
      <description>2022.8.9总结反思：看起来好像分析源码挺久了，但是每次都只是读一遍源码、注释和Java doc，然后Command+C复制、Comman</description>
    </item>
    
    <item>
      <title>LeetCode Stack</title>
      <link>https://anjanavakil.github.io/post/leetcode-stack/</link>
      <pubDate>Wed, 20 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-stack/</guid>
      <description>LeetCode + 《剑指Offer II》刷题笔记。 栈 剑指 Offer II 036. 后缀表达式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { public: int evalRPN(vector&amp;lt;string&amp;gt;&amp;amp; tokens) { stack&amp;lt;int&amp;gt; s; int a,b,res; for(string&amp;amp;</description>
    </item>
    
    <item>
      <title>LeetCode Dynamic Programming</title>
      <link>https://anjanavakil.github.io/post/leetcode-dp/</link>
      <pubDate>Mon, 18 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-dp/</guid>
      <description>LeetCode + 《剑指Offer II》刷题笔记。 动态规划</description>
    </item>
    
    <item>
      <title>StringUtils: leftPad&#43;rightPad</title>
      <link>https://anjanavakil.github.io/post/stringutils/</link>
      <pubDate>Fri, 15 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/stringutils/</guid>
      <description>StringUtils的leftpad和righted方法源码分析 依赖： 1 2 3 4 5 6 &amp;lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.commons&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-lang3&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.12.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; leftPad: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</description>
    </item>
    
    <item>
      <title>Spring Batch</title>
      <link>https://anjanavakil.github.io/post/springbatch-notes/</link>
      <pubDate>Mon, 11 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/springbatch-notes/</guid>
      <description>官网示例： Creating a Batch Service Create a Business Class Person.java: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package com.example.batchprocessing; public class Person { private String lastName; private String firstName; public Person() { } public Person(String firstName,</description>
    </item>
    
    <item>
      <title>LeetCode Heap</title>
      <link>https://anjanavakil.github.io/post/leetcode-heap/</link>
      <pubDate>Fri, 08 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-heap/</guid>
      <description>LeetCode + 《剑指Offer II》刷题笔记。 堆 如果面试题需要求出一个动态数据集合中的最大值或最小值，那么可以考虑使用堆来解决问题。最小堆经常用来求取</description>
    </item>
    
    <item>
      <title>LeetCode Tree</title>
      <link>https://anjanavakil.github.io/post/leetcode-tree/</link>
      <pubDate>Tue, 05 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-tree/</guid>
      <description>LeetCode + 《剑指Offer II》刷题笔记。 树 二叉树的深度优先搜索 前序遍历 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public: vector&amp;lt;int&amp;gt; preorderTraversal(TreeNode* root) { vector&amp;lt;int&amp;gt; res; stack&amp;lt;TreeNode*&amp;gt; s; TreeNode* cur=root; while(cur || !s.empty()){</description>
    </item>
    
    <item>
      <title>LeetCode Sort</title>
      <link>https://anjanavakil.github.io/post/leetcode-sort/</link>
      <pubDate>Fri, 01 Jul 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-sort/</guid>
      <description>LeetCode + 《剑指Offer II》刷题笔记。 排序 Interval 56 Merge Intervals 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; merge(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; intervals) { sort(intervals.begin(),intervals.end()); vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; //avoid an edge case res.push_back(intervals[0]); for(int i=1;i&amp;lt;intervals.size();i++){ int start=intervals[i][0],end=intervals[i][1]; int lastEnd=res[res.size()-1][1]; if(start&amp;lt;=lastEnd){ //the reason of</description>
    </item>
    
    <item>
      <title>Vue</title>
      <link>https://anjanavakil.github.io/post/vue/</link>
      <pubDate>Mon, 20 Jun 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/vue/</guid>
      <description></description>
    </item>
    
    <item>
      <title>JVM</title>
      <link>https://anjanavakil.github.io/post/jvm/</link>
      <pubDate>Sun, 12 Jun 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/jvm/</guid>
      <description>Java SE 8虚拟机规范：The Java® Virtual Machine Specification-Java SE 8 Edition 类加载子系统 运行时数据区概述及线程 Run-Time Data Areas The Java Virtual Machine defines various run-time data areas that are used during execution of a program. Some of these data areas are created on Java Virtual</description>
    </item>
    
    <item>
      <title>《一本书看透信贷：信贷业务全流程深度剖析》</title>
      <link>https://anjanavakil.github.io/post/credit/</link>
      <pubDate>Fri, 10 Jun 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/credit/</guid>
      <description>豆瓣🔗： 《一本书看透信贷：信贷业务全流程深度剖析》 1.1 信贷基本概念 有些信贷业务银行并不提供资金，只提供信用支持，如票据承兑、保函、信用证等，称</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://anjanavakil.github.io/post/redis/</link>
      <pubDate>Sun, 05 Jun 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/redis/</guid>
      <description>官方文档： Redis documentation Redis Sentinel High availability with Redis Sentinel Redis Sentinel provides high availability for Redis when not using Redis Cluster. Running Sentinel However it is mandatory to use a configuration file when running Sentinel, as this file will be used by the system in order to save the current state that will be reloaded in case of restarts. Sentinel will simply refuse to start</description>
    </item>
    
    <item>
      <title>精彩video</title>
      <link>https://anjanavakil.github.io/post/video/</link>
      <pubDate>Thu, 02 Jun 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/video/</guid>
      <description>网络上看过的精彩讲座/课程/录像/视频等： Jul 15: A Philosophy of Software Design | John Ousterhout | Talks at Google John Ousterhout, Professor of Computer Science at Stanford University, discusses complex techniques on how to become a more confident coder. John is excited to announce that he just published the first edition of a new</description>
    </item>
    
    <item>
      <title>OOM</title>
      <link>https://anjanavakil.github.io/post/oom/</link>
      <pubDate>Fri, 20 May 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/oom/</guid>
      <description>3.2 Understand the OutOfMemoryError Exception 翻译+理解： One common indication of a memory leak is the java.lang.OutOfMemoryError exception. Usually, this error is thrown when there is insufficient space to allocate an object in the Java heap. In this case, The garbage collector cannot make space available to accommodate a new object, and the heap cannot be expanded further. Also, this error may be thrown when there</description>
    </item>
    
  </channel>
</rss>
