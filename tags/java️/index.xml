<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java☕️ on Anjana</title>
    <link>https://anjanavakil.github.io/tags/java%EF%B8%8F/</link>
    <description>Recent content in Java☕️ on Anjana</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 26 Mar 2022 08:15:48 +0800</lastBuildDate><atom:link href="https://anjanavakil.github.io/tags/java%EF%B8%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringBoot 笔记</title>
      <link>https://anjanavakil.github.io/post/springboot-notes/</link>
      <pubDate>Sat, 26 Mar 2022 08:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/springboot-notes/</guid>
      <description>豆瓣🔗：《SpringBoot+Vue全栈开发实战》 一些SpringBoot陌生部分的笔记。技术类书籍，不能说有多好，但是如果有一份好的代码</description>
    </item>
    
    <item>
      <title>Generics</title>
      <link>https://anjanavakil.github.io/post/effective-java-generic/</link>
      <pubDate>Wed, 23 Mar 2022 20:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-generic/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 26: Don’t use raw types 请不要使用原始类型（ raw types 实在不知道该怎么翻译🤷🏻‍♀️，中文版书籍译为原</description>
    </item>
    
    <item>
      <title>implement Comparable</title>
      <link>https://anjanavakil.github.io/post/effective-java-comparable/</link>
      <pubDate>Wed, 23 Mar 2022 13:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-comparable/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 14: Consider implementing Comparable 考虑实现 Comparable 接口 Virtually all of the value classes in the Java platform libraries, as well as all enum types, implement Comparable. If you are writing a value class with an obvious natural ordering, such as alphabetical</description>
    </item>
    
    <item>
      <title>override equals</title>
      <link>https://anjanavakil.github.io/post/effective-java-overriding-equals/</link>
      <pubDate>Tue, 22 Mar 2022 15:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-overriding-equals/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 10: Obey the general contract when overriding equals 覆盖 equals 方法时请遵守通用约定 Not to override the equals method 1. Each instance of the class is inherently unique. This is true for classes such as Thread that</description>
    </item>
    
    <item>
      <title>Memory Leaks &#43; Garbage Collect</title>
      <link>https://anjanavakil.github.io/post/effective-java-gc/</link>
      <pubDate>Tue, 22 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-gc/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 7: Eliminate obsolete object references 消除过时的对象引用 Incorrect Version 一个简单的Stack实现的例子： 1 2 3 4 5 6 7 8 9 10 11 12 13</description>
    </item>
    
    <item>
      <title>Prefer try-with-resources to try-finally</title>
      <link>https://anjanavakil.github.io/post/effective-java-try-with-resources/</link>
      <pubDate>Tue, 22 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-try-with-resources/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 9: Prefer try-with-resources to try-finally 使用 try-with-resources 优于 try-finally try-finally 1 2 3 4 5 6 7 8 9 // try-finally - No longer the best way to close resources! static String firstLineOfFile(String path) throws IOException { BufferedReader br = new BufferedReader(new FileReader(path));</description>
    </item>
    
    <item>
      <title>Builder</title>
      <link>https://anjanavakil.github.io/post/effective-java-builder/</link>
      <pubDate>Mon, 21 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-builder/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 2: Consider a builder when faced with many constructor parameters 当构造函数有多个参数时，考虑使用builder模式 1. Telescoping constructor pattern - does not scale well! 1</description>
    </item>
    
    <item>
      <title>static factory method VS constructor</title>
      <link>https://anjanavakil.github.io/post/effective-java-static-factory-method/</link>
      <pubDate>Sat, 19 Mar 2022 10:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-static-factory-method/</guid>
      <description>豆瓣🔗: Effective Java 《Effective Java中文版（第3版）》 Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 1: Consider static factory methods instead of constructors 考虑以静态工厂方</description>
    </item>
    
    <item>
      <title>Lambda表达式</title>
      <link>https://anjanavakil.github.io/post/lambda-expression/</link>
      <pubDate>Sat, 12 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/lambda-expression/</guid>
      <description>之前技术博客都是在CSDN上发表的，好久没用了，登录上去居然有人给我以前的博客点赞评论，尽管很少但发现还是有人看的。看了一下之前写的博客，发</description>
    </item>
    
    <item>
      <title>Dependency Injection</title>
      <link>https://anjanavakil.github.io/post/effective-java-di/</link>
      <pubDate>Fri, 21 Jan 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-di/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 5: Prefer dependency injection to hardwiring resources 优先考虑依赖注入来引入资源 Condition Many classes depend on one or more underlying resources. For example, a spell checker depends on a dictionary. Inappropriate use of static utility -</description>
    </item>
    
    <item>
      <title>Serialization</title>
      <link>https://anjanavakil.github.io/post/effective-java-serialization/</link>
      <pubDate>Mon, 17 Jan 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-serialization/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 85: Prefer alternatives to Java serialization 其他方法优于Java序列化 In summary, serialization is dangerous and should be avoided. If you are designing a system from scratch, use a cross-platform structured-data repre</description>
    </item>
    
  </channel>
</rss>
