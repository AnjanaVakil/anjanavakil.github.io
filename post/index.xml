<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Anjana</title>
    <link>https://anjanavakil.github.io/post/</link>
    <description>Recent content in Posts on Anjana</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 23 Mar 2022 13:15:48 +0800</lastBuildDate><atom:link href="https://anjanavakil.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Code: The Hidden Language of Computer Hardware and Software</title>
      <link>https://anjanavakil.github.io/post/code/</link>
      <pubDate>Fri, 25 Feb 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/code/</guid>
      <description>豆瓣🔗：Code: The Hidden Language of Computer Hardware and Software 第一遍读的是中文版，寒假期间重读了英文版。这应该是第一本读完的英文专业书籍。读的过程中还是稍微有些困难的，</description>
    </item>
    
    <item>
      <title>Effective Java: implement Comparable</title>
      <link>https://anjanavakil.github.io/post/effective_java_comparable/</link>
      <pubDate>Wed, 23 Mar 2022 13:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_comparable/</guid>
      <description>Effective Java 的笔记，以代码为主，批注为辅。 Item 14: Consider implementing Comparable 考虑实现 Comparable 接口 Virtually all of the value classes in the Java platform libraries, as well as all enum types, implement Comparable. If you are writing a value class with an obvious natural ordering, such as alphabetical order, numerical order, or chronological order, you</description>
    </item>
    
    <item>
      <title>Effective Java: Override equals</title>
      <link>https://anjanavakil.github.io/post/effective_java_overriding_equals/</link>
      <pubDate>Tue, 22 Mar 2022 15:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_overriding_equals/</guid>
      <description>Effective Java 的笔记，以代码为主，批注为辅。 Item 10: Obey the general contract when overriding equals 覆盖 equals 方法时请遵守通用约定 Not to override the equals method 1. Each instance of the class is inherently unique. This is true for classes such as Thread that represent active entities rather than values. The</description>
    </item>
    
    <item>
      <title>Effective Java: Memory Leaks &#43; Garbage Collect</title>
      <link>https://anjanavakil.github.io/post/effective_java_gc/</link>
      <pubDate>Tue, 22 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_gc/</guid>
      <description>Effective Java 的笔记，以代码为主，批注为辅。 Item 7: Eliminate obsolete object references 消除过时的对象引用 Incorrect Version 一个简单的Stack实现的例子： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</description>
    </item>
    
    <item>
      <title>Effective Java: Prefer try-with-resources to try-finally</title>
      <link>https://anjanavakil.github.io/post/effective_java_try_with_resources/</link>
      <pubDate>Tue, 22 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_try_with_resources/</guid>
      <description>Effective Java 的笔记，以代码为主，批注为辅。 Item 9: Prefer try-with-resources to try-finally 使用 try-with-resources 优于 try-finally try-finally 1 2 3 4 5 6 7 8 9 // try-finally - No longer the best way to close resources! static String firstLineOfFile(String path) throws IOException { BufferedReader br = new BufferedReader(new FileReader(path)); try { return br.readLine(); } finally {</description>
    </item>
    
    <item>
      <title>Effective Java: Builder</title>
      <link>https://anjanavakil.github.io/post/effective_java_builder/</link>
      <pubDate>Mon, 21 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_builder/</guid>
      <description>豆瓣🔗: Effective Java 《Effective Java中文版（第3版）》 Effective Java 的笔记，以代码为主，批注为辅。 Item 1: Consider static factory methods instead of constructors 考虑以静态工厂方法代替构造函数</description>
    </item>
    
    <item>
      <title>Effective Java: Dependency Injection</title>
      <link>https://anjanavakil.github.io/post/effective_java_di/</link>
      <pubDate>Mon, 21 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_di/</guid>
      <description>Effective Java 的笔记，以代码为主，批注为辅。 Item 5: Prefer dependency injection to hardwiring resources 优先考虑依赖注入来引入资源 Condition Many classes depend on one or more underlying resources. For example, a spell checker depends on a dictionary. Inappropriate use of static utility - inflexible &amp;amp; untestable! 1 2 3 4</description>
    </item>
    
    <item>
      <title>Coders At Work 编程人生</title>
      <link>https://anjanavakil.github.io/post/coders_at_work/</link>
      <pubDate>Sun, 20 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/coders_at_work/</guid>
      <description>豆瓣🔗: Coders At Work 《编程人生：15位软件先驱访谈录》 第一次读这本书读的是英文版，说实话当时读的云里雾里的😶‍🌫️，读了一章就丢下了，没有太大收获</description>
    </item>
    
    <item>
      <title>Designing Data-Intensive Applications Notes</title>
      <link>https://anjanavakil.github.io/post/designing_data-intensive_applications/</link>
      <pubDate>Thu, 17 Mar 2022 22:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/designing_data-intensive_applications/</guid>
      <description>atomic In the context of concurrent operations: describing an operation that appears to take effect at a single point in time, so another concurrent process can never encounter the operation in a “half-finished” state. See also isolation.
In the context of transactions: grouping together a set of writes that must either all be committed or all be rolled back, even if faults occur.
REST REST is not a protocol, but rather a design philosophy that builds upon the principles of HTTP.</description>
    </item>
    
    <item>
      <title>Show Your Work!</title>
      <link>https://anjanavakil.github.io/post/show_your_work/</link>
      <pubDate>Wed, 16 Mar 2022 21:00:00 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/show_your_work/</guid>
      <description>douban🔗: Show Your Work! 10 Ways to Share Your Creativity and Get Discovered  This is my first English book review for the second English book I entirely finished reading in 2022!
The book is brief and there is not a lot of unfamiliar vocabulary so I read it in two hours. The author listed 10 approaches for ordinary individuals to share creativity and get discovered. The book demonstrated how to think about one&amp;rsquo;s work as a never-ending process, how to share one&amp;rsquo;s process in a way that attracts people who might be interested in what they do, and how to deal with the ups and downs of putting oneself and one&amp;rsquo;s work out in the world.</description>
    </item>
    
    <item>
      <title>Lambda表达式</title>
      <link>https://anjanavakil.github.io/post/lambda_expression/</link>
      <pubDate>Sat, 12 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/lambda_expression/</guid>
      <description>之前技术博客都是在CSDN上发表的，好久没用了，登录上去居然有人给我以前的博客点赞评论，尽管很少但发现还是有人看的。看了一下之前写的博客，发</description>
    </item>
    
    <item>
      <title>《编写可读代码的艺术》</title>
      <link>https://anjanavakil.github.io/post/the_art_of_readable_code/</link>
      <pubDate>Fri, 04 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/the_art_of_readable_code/</guid>
      <description>豆瓣🔗：《编写可读代码的艺术》 关于编码规范和编写高质量代码类的书籍，印象中第一本看完的应该是《阿里巴巴Java开发手册》，《编写可读代码的艺</description>
    </item>
    
    <item>
      <title>2022年1月~2月陌生词汇</title>
      <link>https://anjanavakil.github.io/post/vocabulary_2022_1_2/</link>
      <pubDate>Mon, 28 Feb 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/vocabulary_2022_1_2/</guid>
      <description>每个人的基础以及敏感偏好都不同。如果每次备考都背单词书的话，对我而言总是在重复会的单词，但不会的单词并不会得到太大的重视，因此记录下每天英文</description>
    </item>
    
    <item>
      <title>《世界因你不同：李开复自传》</title>
      <link>https://anjanavakil.github.io/post/the_kai_fulee_story/</link>
      <pubDate>Thu, 10 Feb 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/the_kai_fulee_story/</guid>
      <description>豆瓣🔗：《世界因你不同：李开复自传》 回家路上😷+在家床上🤣看完的一本自传。 1、前面读到李开复在上学时期的调皮捣蛋，记得自己当时差点在飞机上笑</description>
    </item>
    
    <item>
      <title>《影响商业的50本书》</title>
      <link>https://anjanavakil.github.io/post/50_business_must_reads/</link>
      <pubDate>Thu, 10 Feb 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/50_business_must_reads/</guid>
      <description>豆瓣🔗：《影响商业的50本书》 算是作者对商业书籍的书评汇总起来的解说式的书籍，收获颇丰。 1、对一些事物不同维度和方向的思考：作为金融商业领域</description>
    </item>
    
    <item>
      <title>关于阅读</title>
      <link>https://anjanavakil.github.io/post/read_summary_2022/</link>
      <pubDate>Tue, 01 Feb 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/read_summary_2022/</guid>
      <description>一直觉得阅读也只不过是排解人生无聊的陪伴，不太喜欢阅读如何如何好之类的说辞，但是有次在微读看到有书友这样写： 读书和思考是一件辛苦的事，像暗夜</description>
    </item>
    
    <item>
      <title>《当下的力量》</title>
      <link>https://anjanavakil.github.io/post/the_power_of_now/</link>
      <pubDate>Wed, 19 Jan 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/the_power_of_now/</guid>
      <description>豆瓣🔗：《当下的力量》 2021年10月份开始阅读，只读了1/3，2022年1月9日书友推荐，很快就接着读完了。一直拖着没写书评，正好是隔离D</description>
    </item>
    
    <item>
      <title>CS基础知识书籍推荐(已读)</title>
      <link>https://anjanavakil.github.io/post/cs_book_recommendation/</link>
      <pubDate>Sat, 15 Jan 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/cs_book_recommendation/</guid>
      <description>豆瓣🔗： 《编码：隐匿在计算机软硬件背后的语言》 Code: The Hidden Language of Computer Hardware and Software 《计算机是怎样跑起来的》 《程序是怎样跑起来的》 《网络是怎样连接的》 《计算机系</description>
    </item>
    
    <item>
      <title>《沉思录》</title>
      <link>https://anjanavakil.github.io/post/meditations/</link>
      <pubDate>Sat, 15 Jan 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/meditations/</guid>
      <description>豆瓣🔗：《沉思录》 古罗马皇帝马可·奥勒留，执掌大权几十年。他不断写下与自己心灵的对话，写进名为“致我自己”的日记。他死后，这本日记出版，从而</description>
    </item>
    
    <item>
      <title>《运动改造大脑》</title>
      <link>https://anjanavakil.github.io/post/the_revolutionary_new_science_of_exercise_and_the_brain/</link>
      <pubDate>Thu, 13 Jan 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/the_revolutionary_new_science_of_exercise_and_the_brain/</guid>
      <description>豆瓣🔗：《运动改造大脑》 Wendy Suzuki: The brain-changing benefits of exercise | TED TED🔗：wendy_suzuki_the_brain_changing_benefits_of_</description>
    </item>
    
  </channel>
</rss>
