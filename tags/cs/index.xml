<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS💻 on Anjana</title>
    <link>https://anjanavakil.github.io/tags/cs/</link>
    <description>Recent content in CS💻 on Anjana</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 25 Mar 2022 20:15:48 +0800</lastBuildDate><atom:link href="https://anjanavakil.github.io/tags/cs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Aha! Algorithms 啊哈！算法</title>
      <link>https://anjanavakil.github.io/post/pp_aha-algorithms/</link>
      <pubDate>Fri, 25 Mar 2022 20:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/pp_aha-algorithms/</guid>
      <description>《编程珠玑》的笔记。 Column 2: Aha! Algorithms 三个问题 A.给定一个最多包含40亿个随机排列的32位整数的顺序文件，找出一个不在文件中的32位整数（在文件中至少</description>
    </item>
    
    <item>
      <title>Cracking the Oyster 开篇</title>
      <link>https://anjanavakil.github.io/post/pp_cracking-the-oyster/</link>
      <pubDate>Thu, 24 Mar 2022 20:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/pp_cracking-the-oyster/</guid>
      <description>《编程珠玑》的笔记。 作者 Jon Bentley 推荐的阅读方法，因此每次完成一章，重点是自己思考习题。 One hint about reading the essays: don’t go too fast. Read them carefully, one per sitting. Try the problems as they are posed — some</description>
    </item>
    
    <item>
      <title>Generics</title>
      <link>https://anjanavakil.github.io/post/effective_java_generic/</link>
      <pubDate>Wed, 23 Mar 2022 20:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_generic/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 26: Don’t use raw types 请不要使用原始类型（ raw types 实在不知道该怎么翻译🤷🏻‍♀️，中文版书籍译为原</description>
    </item>
    
    <item>
      <title>implement Comparable</title>
      <link>https://anjanavakil.github.io/post/effective_java_comparable/</link>
      <pubDate>Wed, 23 Mar 2022 13:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_comparable/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 14: Consider implementing Comparable 考虑实现 Comparable 接口 Virtually all of the value classes in the Java platform libraries, as well as all enum types, implement Comparable. If you are writing a value class with an obvious natural ordering, such as alphabetical</description>
    </item>
    
    <item>
      <title>override equals</title>
      <link>https://anjanavakil.github.io/post/effective_java_overriding_equals/</link>
      <pubDate>Tue, 22 Mar 2022 15:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_overriding_equals/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 10: Obey the general contract when overriding equals 覆盖 equals 方法时请遵守通用约定 Not to override the equals method 1. Each instance of the class is inherently unique. This is true for classes such as Thread that</description>
    </item>
    
    <item>
      <title>Memory Leaks &#43; Garbage Collect</title>
      <link>https://anjanavakil.github.io/post/effective_java_gc/</link>
      <pubDate>Tue, 22 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_gc/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 7: Eliminate obsolete object references 消除过时的对象引用 Incorrect Version 一个简单的Stack实现的例子： 1 2 3 4 5 6 7 8 9 10 11 12 13</description>
    </item>
    
    <item>
      <title>Prefer try-with-resources to try-finally</title>
      <link>https://anjanavakil.github.io/post/effective_java_try_with_resources/</link>
      <pubDate>Tue, 22 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_try_with_resources/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 9: Prefer try-with-resources to try-finally 使用 try-with-resources 优于 try-finally try-finally 1 2 3 4 5 6 7 8 9 // try-finally - No longer the best way to close resources! static String firstLineOfFile(String path) throws IOException { BufferedReader br = new BufferedReader(new FileReader(path));</description>
    </item>
    
    <item>
      <title>Builder</title>
      <link>https://anjanavakil.github.io/post/effective_java_builder/</link>
      <pubDate>Mon, 21 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_builder/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 2: Consider a builder when faced with many constructor parameters 当构造函数有多个参数时，考虑使用builder模式 1. Telescoping constructor pattern - does not scale well! 1</description>
    </item>
    
    <item>
      <title>Coders At Work: Brad Fitzpatrick</title>
      <link>https://anjanavakil.github.io/post/coders_at_work-brad-fitzpatrick/</link>
      <pubDate>Sun, 20 Mar 2022 15:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/coders_at_work-brad-fitzpatrick/</guid>
      <description>Brad Fitzpatrick 书中唯一的80后，LiveJournal和memcached开发者。现效力于Google。 1、学习东西 Seibel: It does seem that while you were writing all this stuff because you needed it, you</description>
    </item>
    
    <item>
      <title>Coders At Work: Jamie Zawinski</title>
      <link>https://anjanavakil.github.io/post/coders_at_work-jamie-zawinski/</link>
      <pubDate>Sun, 20 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/coders_at_work-jamie-zawinski/</guid>
      <description>豆瓣🔗: Coders At Work 《编程人生：15位软件先驱访谈录》 第一次读这本书读的是英文版，说实话当时读的云里雾里的😶‍🌫️，读了一章就丢下了，没有太大收获</description>
    </item>
    
    <item>
      <title>static factory method VS constructor</title>
      <link>https://anjanavakil.github.io/post/effective-java-static-factory-method/</link>
      <pubDate>Sat, 19 Mar 2022 10:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective-java-static-factory-method/</guid>
      <description>豆瓣🔗: Effective Java 《Effective Java中文版（第3版）》 Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 1: Consider static factory methods instead of constructors 考虑以静态工厂方</description>
    </item>
    
    <item>
      <title>Designing Data-Intensive Applications Notes</title>
      <link>https://anjanavakil.github.io/post/designing_data-intensive_applications/</link>
      <pubDate>Thu, 17 Mar 2022 22:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/designing_data-intensive_applications/</guid>
      <description>atomic In the context of concurrent operations: describing an operation that appears to take effect at a single point in time, so another concurrent process can never encounter the operation in a “half-finished” state. See also isolation.
In the context of transactions: grouping together a set of writes that must either all be committed or all be rolled back, even if faults occur.
REST REST is not a protocol, but rather a design philosophy that builds upon the principles of HTTP.</description>
    </item>
    
    <item>
      <title>Lambda表达式</title>
      <link>https://anjanavakil.github.io/post/lambda_expression/</link>
      <pubDate>Sat, 12 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/lambda_expression/</guid>
      <description>之前技术博客都是在CSDN上发表的，好久没用了，登录上去居然有人给我以前的博客点赞评论，尽管很少但发现还是有人看的。看了一下之前写的博客，发</description>
    </item>
    
    <item>
      <title>《编写可读代码的艺术》</title>
      <link>https://anjanavakil.github.io/post/the_art_of_readable_code/</link>
      <pubDate>Fri, 04 Mar 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/the_art_of_readable_code/</guid>
      <description>豆瓣🔗：《编写可读代码的艺术》 关于编码规范和编写高质量代码类的书籍，印象中第一本看完的应该是《阿里巴巴Java开发手册》，《编写可读代码的艺</description>
    </item>
    
    <item>
      <title>CS 基础知识笔记</title>
      <link>https://anjanavakil.github.io/post/408/</link>
      <pubDate>Sat, 12 Feb 2022 20:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/408/</guid>
      <description>CS 基础知识的笔记，不算是总结性的笔记，只是曾经备忘录上记录下来的和对于自己陌生的点，或许应该保存到blog上，抑或是考试教育的一种印证。 CO 1</description>
    </item>
    
    <item>
      <title>剑指 Offer II 数组</title>
      <link>https://anjanavakil.github.io/post/jj-offer-array/</link>
      <pubDate>Sat, 22 Jan 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/jj-offer-array/</guid>
      <description>《剑指Offer II》的刷题笔记。 第二章 数组 006. 排序数组中两个数字之和 剑指 Offer II 006. 排序数组中两个数字之和 二分查找 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>Dependency Injection</title>
      <link>https://anjanavakil.github.io/post/effective_java_di/</link>
      <pubDate>Fri, 21 Jan 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_di/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 5: Prefer dependency injection to hardwiring resources 优先考虑依赖注入来引入资源 Condition Many classes depend on one or more underlying resources. For example, a spell checker depends on a dictionary. Inappropriate use of static utility -</description>
    </item>
    
    <item>
      <title>剑指 Offer II 整数</title>
      <link>https://anjanavakil.github.io/post/jj-offer-number/</link>
      <pubDate>Thu, 20 Jan 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/jj-offer-number/</guid>
      <description>《剑指Offer II》的刷题笔记。 第一章 整数 001. 整数除法 剑指 Offer II 001. 整数除法 由于是整数除法并且除数不等于0，因此商的绝对值一定&amp;lt;=被除数的</description>
    </item>
    
    <item>
      <title>Recursion</title>
      <link>https://anjanavakil.github.io/post/leetcode-recursion/</link>
      <pubDate>Tue, 18 Jan 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/leetcode-recursion/</guid>
      <description>自己一直还是比较努力的，不知道“摆烂”是种什么状态，但最近的自己迷茫，深深感觉到现在的自己不就处于“摆烂”的状态吗？没有目标没有计划，只失败</description>
    </item>
    
    <item>
      <title>Serialization</title>
      <link>https://anjanavakil.github.io/post/effective_java_serialization/</link>
      <pubDate>Mon, 17 Jan 2022 14:15:48 +0800</pubDate>
      
      <guid>https://anjanavakil.github.io/post/effective_java_serialization/</guid>
      <description>Effective Java 的笔记，代码、英语原文为主，批注、翻译为辅。 Item 85: Prefer alternatives to Java serialization 其他方法优于Java序列化 In summary, serialization is dangerous and should be avoided. If you are designing a system from scratch, use a cross-platform structured-data representation such as JSON or</description>
    </item>
    
  </channel>
</rss>
